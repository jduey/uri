
;; parsing a URI as described in RFC 2396
;; https://tools.ietf.org/html/rfc2396

(add-ns p (git-dependency "github.com:jduey/parser.git" "parser.toc"))

(def escaped (p/rule "escaped"
                     (p/all (p/term "%") p/hex p/hex)))

(def mark (p/rule "mark"
                  (p/one-of "-_.!~*'()")))

(def unreserved (p/rule "unreserved"
                        (comp p/alphanum mark)))

(def reserved (p/rule "reserved"
                      (p/one-of ";/?:@&=+$,")))

(def uric-no-slash (p/rule "uric-no-slash"
                           (comp unreserved
                                 escaped
                                 (p/one-of ";?:@&=+$,"))))

(def uric (p/rule "uric"
                  (comp uric-no-slash
                        (p/term "/"))))

(def urics (map (p/none-or-more uric) list-to-str))

(def opaque-part (p/rule "opaque-part"
                         (apply-to (fn [head tail]
                                     {:opaque-part (list-to-str (cons head tail))})
                                   uric-no-slash
                                   (p/none-or-more uric))))

(def fragment (p/rule "fragment" urics))

(def query (p/rule "query" urics))

(def pchar (p/rule "pchar"
                   (comp unreserved
                         escaped
                         (p/one-of ":@&=+$,"))))

(def pchars (map (p/none-or-more pchar) list-to-str))

(def param (p/rule "param" pchars))

(def segment (p/rule "segment"
                     (apply-to (fn [seg param]
                                 (list-to-str (cons seg (flatten param))))
                               pchars
                               (p/none-or-more (p/all (p/term ";") param)))))

(def abs-path (p/rule "abs-path"
                      (map (p/one-or-more (p/all (p/ignore (p/term "/"))
                                                 segment))
                           (fn [[head & tail]]
                             {:path (comp* head tail)}))))

(def path (p/rule "path"
                  (comp abs-path
                        opaque-part
                        (p/always {}))))

(def port (p/rule "port"
                  (p/optional (map (p/one-or-more p/digit) str-to-int))))

(def IPv4address (p/rule "IPv4address"
                         (apply-to comp
                                   (map (p/one-or-more p/digit) list-to-str) (p/term ".")
                                   (map (p/one-or-more p/digit) list-to-str) (p/term ".")
                                   (map (p/one-or-more p/digit) list-to-str) (p/term ".")
                                   (map (p/one-or-more p/digit) list-to-str))))

(def label-body (map (p/none-or-more (apply-to cons
                                               (p/term "-")
                                               (p/one-or-more p/alphanum)))
                     flatten))

(def toplabel (p/rule "toplabel"
                      (apply-to comp
                                (apply-to cons
                                          p/alpha
                                          (p/none-or-more p/alphanum))
                                label-body)))

(def domainlabel (p/rule "domainlabel"
                         (apply-to comp
                                   (p/one-or-more p/alphanum)
                                   label-body)))

(defn assemble-hostname [dom-lbls top-lbl]
  (list-to-str (reduce dom-lbls top-lbl
                       (fn [host-name [dom-lbl dot]]
                         (comp dom-lbl (cons dot host-name))))))

(def hostname (p/rule "hostname"
                      (apply-to assemble-hostname
                                (p/none-or-more (p/all domainlabel (p/term ".")))
                                toplabel)))

(def host (p/rule "host"
                  (comp hostname
                        IPv4address)))

(def hostport (p/rule "hostport"
                      (comp (apply-to (fn [host port]
                                        {:host host
                                         :port port})
                                      host (p/ignore (p/term ":")) port)
                            (map host (partial hash-map :host)))))

(def userinfo (p/rule "userinfo"
                      (map (p/none-or-more (comp unreserved
                                                 escaped
                                                 (p/one-of "$,;:&=+")))
                           list-to-str)))

(def server (p/rule "server"
                    (p/optional (apply-to (fn [[user-info] host]
                                            (comp user-info host))
                                          (comp (p/all (map userinfo (partial hash-map :user))
                                                       (p/ignore (p/term "@")))
                                                (p/always (list {})))
                                          hostport))))

(def reg-name (p/rule "reg-name"
                      (map (p/one-or-more (comp unreserved
                                                escaped
                                                (p/one-of "$,;:@&=+")))
                           (fn [char-list]
                             {:registry-name (list-to-str char-list)}))))

(def authority (p/rule "authority"
                       (comp server reg-name)))

(def scheme (p/rule "scheme"
                    (apply-to (fn [scheme-first scheme-rest]
                                (list-to-str (cons scheme-first scheme-rest)))
                              p/alpha
                              (p/none-or-more (comp p/alphanum (p/one-of "+-."))))))

(def rel-segment (p/rule "rel-segment"
                         (map (p/one-or-more (comp unreserved
                                                   escaped
                                                   (p/one-of "$,;@&=+")))
                              list-to-str)))

(def rel-path (p/rule "rel-path"
                      (apply-to (fn [head tail]
                                  (println :head head :tail tail)
                                  {:relative-path (comp* (list head) tail)})
                                rel-segment
                                (p/none-or-more (p/all (p/ignore (p/term "/"))
                                                       segment)))))

(def net-path (p/rule "net-path"
                      (apply-to comp
                                (p/ignore (p/term "//"))
                                authority
                                (p/optional abs-path))))

(def uri-query (comp (map (p/all (p/ignore (p/term "?")) query)
                          (fn [[q]] {:query q}))
                     (p/always {})))

(def hier-part (p/rule "hier-part"
                       (apply-to comp
                                 (comp net-path abs-path)
                                 uri-query)))

(def relativeURI (p/rule "relativeURI"
                         (apply-to comp
                                   (comp net-path
                                         abs-path
                                         rel-path)
                                   uri-query)))

(def absoluteURI (p/rule "absoluteURI"
                         (apply-to (fn [scheme part]
                                     (assoc part :scheme scheme))
                                   scheme
                                   (p/ignore (p/term ":"))
                                   (comp hier-part
                                         opaque-part))))

(def URI-reference (p/rule "URI-reference"
                           (apply-to comp
                                     (comp absoluteURI
                                           relativeURI
                                           (p/always {}))
                                     (comp (map (p/all (p/ignore (p/term "#"))
                                                       fragment)
                                                (fn [[frag]] {:fragment frag}))
                                           (p/always {})))))
